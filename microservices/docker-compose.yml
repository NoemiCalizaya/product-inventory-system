version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - microservices_network
    command: ["postgres", "-c", "max_connections=200"]

  # Servicio de Usuarios
  user-service:
    build: 
      context: ./user-service
      dockerfile: Dockerfile
    ports:
      - "${USER_SERVICE_PORT}:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - microservices_network

  # Servicio de Ventas
  sales-service:
    build: 
      context: ./sales-service
      dockerfile: Dockerfile
    ports:
      - "${SALES_SERVICE_PORT}:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
      INVENTORY_SERVICE_URL: inventory-service:8080
      PRODUCT_SERVICE_URL: product-service:8080
      LOGGING_LEVEL_COM_MICROSERVICES_SALES: TRACE
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB: DEBUG
      LOGGING_LEVEL_FEIGN: DEBUG
      LOGGING_LEVEL_ROOT: DEBUG
    depends_on:
      postgres:
        condition: service_healthy
      inventory-service:
        condition: service_started
      product-service:
        condition: service_started
    networks:
      - microservices_network

  # Servicio de Inventario
  inventory-service:
    build: 
      context: ./inventory-service
      dockerfile: Dockerfile
    ports:
      - "${INVENTORY_SERVICE_PORT}:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - microservices_network

  # Servicio de Productos
  product-service:
    build: 
      context: ./product-service
      dockerfile: Dockerfile
    ports:
      - "${PRODUCT_SERVICE_PORT}:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - microservices_network

  # Servicio de Compras
  purchase-service:
    build: 
      context: ./purchase-service
      dockerfile: Dockerfile
    ports:
      - "${PURCHASE_SERVICE_PORT}:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
      INVENTORY_SERVICE_URL: inventory-service:8080
    depends_on:
      postgres:
        condition: service_healthy
      inventory-service:
        condition: service_started
    networks:
      - microservices_network

networks:
  microservices_network:
    driver: bridge

volumes:
  postgres_data: